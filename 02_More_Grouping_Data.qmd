---
title: "Intro to Data Analysis in R - Additional Grouping"
author: "Aaron Kessler"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
    toc: true
    toc-location: left
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# Load the packages we'll need
library(tidyverse)
library(lubridate)
library(readxl)
library(writexl)
library(janitor)

```

## Presidential Candidate Trips (Dem Primary)


```{r}
# Load in data of prez candidate campaign trips 
events <- readRDS("data/events_saved.rds")
```


```{r}
# Let's take a look at what we've got

events
```


```{r}
# Remember how we can filter

events %>% 
  filter(state == "IA")
```


```{r}
# Filtering for more than one value
# First way: using the "|" symbol to mean OR

events %>% 
  filter(state == "IA" | state == "TX")
```


```{r}
# Second way: using the %in% command and using vector of values

events %>% 
  filter(state %in% c("IA", "TX", "MO"))
```


```{r}
# And remember how we can sort

mystates <- c("IA", "TX", "MO", "NH", "SC")

events %>% 
  filter(state %in% c(mystates)) %>% 
  arrange(desc(date))
```

## Adding/Changing Columns with Mutate()

To add or modify a column, you give it a name, then a single equal sign (=), then define what's in it.  

```{r}
# Test example:

events %>% 
  mutate(mycolumn = "hi there") #remember what happens with recycling here

```


```{r}
events %>% 
  mutate(electioncycle = 2020)
```


```{r}
# Now let's try adding our date-related columns.  First we'll try year.

events %>% 
  mutate(year = year(date))
```


```{r}
# We can add multiple columns as part of one mutate call. Let's do year, month and day in one swoop.

events %>% 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```


```{r}
# This is a good time to remind ourselves that if we want to save our new columns, need to *create new object* or *overwrite*

events <- events %>% 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```


```{r}
# Now we can use our new columns to filter

events %>% 
  filter(year == 2019,
         month == 1)
```


```{r}
# Show me just Kamala's events in January

events %>% 
  filter(year == 2019,
         month == 1,
         cand_lastname == "Harris")
```


## Grouping / Aggregating Data  
  
We'll use the tidyverse and dplyr's `group_by()` and `summarise()` 
   
Let's do some counting with `n()`.
```{r}
events %>% 
  group_by(cand_lastname) %>% 
  summarise(n())
```


```{r}
# now let's add arrange to see who has the most trips
# (not run)  
# events %>% 
#   group_by(cand_lastname) %>% 
#   summarise(n()) %>% 
#   arrange(n)
```


```{r}
# hmm - what's going on here? Look closely and see what the generated count column is called
# events %>% 
#   group_by(cand_lastname) %>% 
#   summarise(n()) %>% 
#   arrange("n()")
```


```{r}
# that doesn't work either.  What about this.

events %>% 
  group_by(cand_lastname) %>% 
  summarise(n()) %>% 
  arrange()

# Ah - so that sort of works? But not really, how do we get desc
# events %>% 
#   group_by(cand_lastname) %>% 
#   summarise(n()) %>% 
#   arrange(desc)
```


```{r}
# Oy - this is getting frustrating. How do we solve?  

# By doing this: giving the new column a NAME of our own.  
# Check it out:

events %>% 
  group_by(cand_lastname) %>% 
  summarise(n = n())
```


```{r}
# Now we can do:

events %>% 
  group_by(cand_lastname) %>% 
  summarise(n = n()) %>% 
  arrange(desc(n))
```


```{r}
# Bingo  
# We can call the new columnn anything we want. "n" is a common thing for counts,  
# but can be anything

events %>% 
  group_by(cand_lastname) %>% 
  summarise(numtrips = n()) %>% 
  arrange(desc(numtrips))
```


```{r}
# Now for some magic  

# Because this counting is such a common operation, and because the `n()` becomes a pain to deal with...  
# ...there is a special shortcut that we can use that collapses everything into one function

events %>% 
  count(cand_lastname)
```


```{r}
events %>% 
  count(cand_lastname) %>% 
  arrange(desc(n))
```


```{r}
# top states visited

events %>% 
  count(state) %>% 
  arrange(desc(n))
```


```{r}
## even MORE magic: you don't have to use arrange either, you can use a built-in
# argument in count() called sort...

# top months
events %>% 
  count(month, sort = TRUE)
```


```{r}
# top single day for most trips
events %>% 
  count(date, sort = TRUE, name = "numtrips")
```


```{r}
# we can also group by **more than one** variable  
# which candidates have gone to which states?

events %>% 
  count(cand_lastname, state) %>% 
  arrange(state, desc(n))
```


```{r}
# what about the most frequent types of events

events %>% 
  count(event_type) %>% 
  arrange(desc(n))
```

## Some more grouping practice: Baseball Salaries 

And how do we get data into R in the first place again??? Let's talk about it.  
  
Remember our CSV imports from Excel? Kind of a similar concept, we can bring from CSV or EXCEL into R.

```{r}
#import the data
salaries <- read_excel("data/MLB2018.xlsx") %>% 
  clean_names()

#let's see what we have
salaries 

#Wait, what did that clean names do???
```


```{r}
# Now some grouping

# What the total payroll paid out by each team?
salaries %>% 
  group_by(team) %>% 
  summarise(sum(salary))
```


```{r}
#now let's give our new colum with the sums a NAME and sort by salary descending
salaries %>% 
  group_by(team) %>% 
  summarise(total_dollars = sum(salary)) %>% 
  arrange(desc(total_dollars))
```


```{r}
# What is the total paid in the league for each position?
salaries %>% 
  group_by(pos) %>%  # <--this is all that changed
  summarise(total_dollars = sum(salary)) %>% 
  arrange(desc(total_dollars))
```


```{r}
# What about the average paid for each position?
salaries %>% 
  group_by(pos) %>% 
  summarise(average_paid = mean(salary)) %>% 
  arrange(desc(average_paid))
```


```{r}
# And if you don't believe in the Designated Hitter?
salaries %>% 
  filter(pos != "DH") %>% 
  group_by(pos) %>% 
  summarise(average_paid = mean(salary)) %>% 
  arrange(desc(average_paid))
```


## Saving and iterating 

```{r}
# let's say I want to save the results?
# we'll go back to the top team payrolls
# we can give it a name within R

teampayrolls <- salaries %>% 
  group_by(team) %>% 
  summarise(total_dollars = sum(salary)) %>% 
  arrange(desc(total_dollars))

teampayrolls
```


```{r}
# export it to a spreadsheet to share with others
write_xlsx(teampayrolls, "data/teampayrolls.xlsx")


```


